<?php

/**
 * @file
 * Hooks and functionality for the Commerce Cart Advanced module.
 */

use Drupal\commerce_cart_advanced\Form\AdvancedAddToCartForm;
use Drupal\views\Form\ViewsForm;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Constants.
 */

/**
 * The name of the field that identifies an order as a non current cart.
 */
const COMMERCE_CART_ADVANCED_NON_CURRENT_FIELD_NAME = 'cart_is_non_current';

/**
 * Hooks.
 */

/**
 * Implements hook_help().
 */
function commerce_cart_advanced_help(
  $route_name,
  RouteMatchInterface $route_match
) {
  if ($route_name !== 'help.page.commerce_cart_advanced') {
    return;
  }

  $output = '';

  // About section.
  $output .= '<h3>' . t('About') . '</h3>';
  $output .= '<p>' . t(
    'The Commerce Cart Advanced module provides enhancements, as well as
     performance improvements, in the customer\'s cart management experience. At
     the present time it mostly focuses on managing multiple carts.'
  ) . '</p>';

  // Current vs non-current carts section.
  $output .= '<h3>' . t('Current vs Non-current Carts') . '</h3>';
  $output .= '<p>' . t(
    'Commerce Cart Advanced introduces the concept of current vs non-current
     carts. By default, one cart per store (the most recent) is considered to be
     current; the rest are considered to be non-current. In single-store sites a
     user will therefore have only one current cart, while in multi-store sites
     (such as marketplaces) a user may have multiple current carts. Current
     carts will be displayed at the top of the cart page, while non-current
     carts will be displayed separately at the bottom. Store managers can
     configure the non-current carts to not be displayed at all.'
  ) . '</p>';

  // Individual cart page section.
  $output .= '<h3>' . t('Individual cart page') . '</h3>';
  $output .= '<p>' . t(
    'Apart from the default cart page, each cart is provided its own individual
     page. Non-current carts might only be displayed in summary mode on the cart
     page. Users can view the full details of each cart on its individual page,
     make changes to it, and choose to proceed to checkout.'
  ) . '</p>';

  // Save for later section.
  $output .= '<h3>' . t('Save carts for later') . '</h3>';
  $output .= '<p>' . t(
    'Users are provided the ability to explicitly flag a cart as non-current;
     this essentially allows users to remove carts from the current carts list
     and save them for later. Saved for later carts will be available in the
     non-current carts list, while sites can easily implement their own displays
     of non-current carts using the Views module.'
  ) . '</p>';

  // Cart block section.
  $output .= '<h3>' . t('Cart block') . '</h3>';
  $output .= '<p>' . t(
    'A new block, called Current Cart, is provided as a drop-in replacement to
     the Cart block. It will display the number of items and summaries for
     current carts only.'
  ) . '</p>';

  return $output;
}

/**
 * Implements hook_theme().
 */
function commerce_cart_advanced_theme($existing, $type, $theme, $path) {
  return [
    'commerce_cart_advanced_current' => [
      'variables' => [
        'carts' => NULL,
      ],
    ],
    'commerce_cart_advanced_non_current' => [
      'variables' => [
        'carts' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_type_build().
 */
function commerce_cart_advanced_entity_type_build(array &$entity_types) {
  $entity_types['commerce_order_item']->setFormClass(
    'add_to_cart',
    AdvancedAddToCartForm::class
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for 'commerce_order_type_form'.
 */
function commerce_cart_advanced_form_commerce_order_type_form_alter(
  array &$form,
  FormStateInterface $form_state
) {
  /** @var \Drupal\commerce_order\Entity\OrderTypeInterface $order_type */
  $order_type = $form_state->getFormObject()->getEntity();
  $view_storage = \Drupal::entityTypeManager()->getStorage('view');
  $available_form_views = [];
  foreach ($view_storage->loadMultiple() as $view) {
    if (strpos($view->get('tag'), 'commerce_cart_form') !== FALSE) {
      $available_form_views[$view->id()] = $view->label();
    }
  }

  $form['commerce_cart']['cart_form_non_current_view'] = [
    '#type' => 'select',
    '#title' => t('Non-current shopping carts form view'),
    '#options' => $available_form_views,
    '#default_value' => $order_type->getThirdPartySetting(
      'commerce_cart_advanced',
      'cart_form_view',
      'commerce_cart_form_non_current'
    ),
  ];

  // Alter the title for the existing form view element to clarify that it will
  // be applied to current carts.
  $form['commerce_cart']['cart_form_view']['#title'] = t('Current shopping carts form view');

  // Alter the order of the form elements so that form view elements are
  // displayed together before the block element.
  $form['commerce_cart']['cart_form_view']['#weight'] = 0;
  $form['commerce_cart']['cart_form_non_current_view']['#weight'] = 1;
  $form['commerce_cart']['cart_block_view']['#weight'] = 2;

  // Add custom submit handler so that we can save our setting.
  $form['actions']['submit']['#submit'][] = '_commerce_cart_advanced_order_type_form_submit';
}

/**
 * Implements hook_form_alter().
 */
function commerce_cart_advanced_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {
  if (!($form_state->getFormObject() instanceof ViewsForm)) {
    return;
  }

  /** @var \Drupal\views\ViewExecutable $view */
  $view = reset($form_state->getBuildInfo()['args']);
  if (empty($view->result)) {
    return;
  }
  $tags = explode(',', $view->storage->get('tag'));
  // `explode()` will return FALSE if there is no tag.
  if ($tags === FALSE) {
    return;
  }
  $tags = array_map('trim', $tags);
  if (!in_array('commerce_cart_form', $tags)) {
    return;
  }

  // We know that view forms are built on the base ID plus arguments.
  $form_id_prefix = 'views_form_' . $view->id() . '_' . $view->current_display . '_';
  $order_id = substr($form_id, strlen($form_id_prefix));
  /** @var \Drupal\commerce_order\Entity\OrderInterface $cart */
  $cart = \Drupal::entityTypeManager()
    ->getStorage('commerce_order')
    ->load($order_id);

  if (!$cart) {
    return;
  }

  // If the setting to show saved carts is disabled, don't show the "save cart
  // for later" button in the cart.
  $config = \Drupal::configFactory()->get('commerce_cart_advanced.settings');
  if (!$config->get('display_non_current_carts')) {
    return;
  }

  // Can't save a cart for later if the cart is already saved for later (marked
  // as non current).
  $non_current_field = $cart->get(COMMERCE_CART_ADVANCED_NON_CURRENT_FIELD_NAME);
  if (!$non_current_field->isEmpty() && $non_current_field->value) {
    return;
  }

  $form['actions']['save_for_later'] = [
    '#type' => 'submit',
    '#value' => t('Save for Later'),
    '#weight' => 6,
    '#submit' => array_merge($form['#submit'], ['_commerce_cart_advanced_cart_form_submit']),
    '#order_id' => $view->argument['order_id']->value[0],
  ];
}

/**
 * Callbacks.
 */

/**
 * Submit handler for order type edit form.
 */
function _commerce_cart_advanced_order_type_form_submit(
  $form,
  FormStateInterface $form_state
) {
  /** @var \Drupal\commerce_order\Entity\OrderTypeInterface $order_type */
  $order_type = $form_state->getFormObject()->getEntity();

  // Install the field for marking orders as non-current carts.
  \Drupal::service('commerce_cart_advanced.order_service')
    ->installNonCurrentField($order_type);

  // Save our third party settings for the order type.
  $settings = $form_state->getValue(['commerce_cart']);
  $order_type->setThirdPartySetting(
    'commerce_cart_advanced',
    'cart_form_view',
    $settings['cart_form_non_current_view']
  );
  $order_type->save();
}

/**
 * Submit handler used to save the cart for later.
 */
function _commerce_cart_advanced_cart_form_submit(
  $form,
  FormStateInterface $form_state
) {
  $cart_id = $form_state->getTriggeringElement()['#order_id'];
  /** @var \Drupal\commerce_order\Entity\OrderInterface $cart */
  $cart = \Drupal::entityTypeManager()
    ->getStorage('commerce_order')
    ->load($cart_id);

  $cart->set(COMMERCE_CART_ADVANCED_NON_CURRENT_FIELD_NAME, TRUE);
  $cart->save();

  \Drupal::messenger()->addMessage(
    \Drupal::translation()->translate('Cart has been saved for later')
  );
  $form_state->setRedirect('commerce_cart.page');
}
